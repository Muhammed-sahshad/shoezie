<%- include('partials/header') %>
    
    <link rel="stylesheet" href="/styles/user/partials/navbar.css">
    <style>
    .product-card {
        display: flex;
        align-items: center;
        justify-content: space-evenly;
        margin-bottom: 15px; 
        border: 1px solid #ddd;
        padding: 10px; 
        border-radius: 5px;
        height: 100px;
    }
    .product-info {
        flex: 5;
        margin-left: 10px; 
    }
    .product-info p{
        margin: 0;
    }

    .quantity-input {
        height: 30px;
        width: 65px;
        margin-top: 5px; 
    }

    .product-quantity{
        flex: 1;
        display: flex;
        flex-direction: row;
        gap: 25px;
        justify-content: space-evenly;
        align-items: center;
        border: 1px solid rgb(189, 189, 189);
        background-color: #f8f8f8;
        border-radius: 5px;
        padding-inline: 10px;
        padding-block: 3px;

    }
    .quantity-decrease , .quantity-increase {
        cursor: pointer;
        font-size: 18px;
        font-weight: bold;
    }
    .product-remove{
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-left: 10px;
    }
    .xmark {
    position: relative;
    width: 22px;
    height: 22px; 
    background-color: #ebebeb;
    border-radius: 5px;
    cursor: pointer;
    }

    .xmark::before,
    .xmark::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 5%;
        height: 13px; 
        background-color: rgb(74, 74, 74);
    }

    .xmark::before {
        transform: translate(-50%, -50%) rotate(45deg);
    }

    .xmark::after {
        transform: translate(-50%, -50%) rotate(-45deg);
    }

    </style>
</head>
<body>
<%- include('partials/navbar') %>

<main class="container mt-5">
    <div class="row">
        <% let subtotal = 0; let totalDiscount = 0; %> 
        <% if (cart.products.length > 0) { %>
    
        <div class="col-md-8">
            <h4>Products</h4>
            <% cart.products.forEach(cart => { %>
                <div class="product-card">
                    <img src="<%= cart.productId.imageUrls[0] %>" class="img-fluid" 
                         alt="Product Image" style="width: 75px; border-radius: 10px; margin-right: 20px;">
                    <div class="product-info">
                        <p class="font-weight-bold"><%= cart.productId.name %></p>
    
                        <% const size = cart.productId.sizes.find(size =>
                             size._id.toString() === cart.sizeId.toString()) %>

                             <%if(size.stock === 0){ %>
                                <p class="out-of-stock" style="color: red;"><small>currently unavailable</small></p>
                                <%}else{%>
                                    <p class="size">Size: <%= size.size %></p>
                                <%}%>

                        <p class="price">
                            <% let originalPrice = cart.productId.price; %>
                            <% let finalPrice = originalPrice; %>
                            <% let discountAmount = 0; %>
    
                            <% if (cart.bestOffer) { %>
                                <span class="original-price" style="text-decoration: line-through; color: gray; margin-right: 5px;">
                                    ₹ <%= originalPrice %>
                                </span>
    
                                <% if (cart.bestOffer.offerType === 'percentage') { %>
                                    <% 
                                    discountAmount = Math.min(
                                        (originalPrice * cart.bestOffer.value) / 100,
                                        cart.bestOffer.maxDiscount || Infinity
                                    ); 
                                    finalPrice = originalPrice - discountAmount;
                                    %>
                                <% } else if (cart.bestOffer.offerType === 'flat') { %>
                                    <% 
                                    discountAmount = cart.bestOffer.value;
                                    finalPrice = originalPrice - discountAmount;
                                    %>
                                <% } %>
    
                                <span class="discounted-price">₹ <%= finalPrice.toFixed(2) %></span>
                            <% } else { %>
                                <span class="original-price">₹ <%= originalPrice.toFixed(2) %></span>
                            <% } %>
                        </p>
    
                    </div>
                    <div class="product-quantity">
                        <div class="quantity-decrease" onclick="decreaseQuantity(this ,'<%= cart._id %>')">-</div>
                        <div class="current-quantity" id="current-quantity"><%= cart.quantity %></div>
                        <div class="quantity-increase" onclick="increaseQuantity(this ,'<%= cart._id %>')">+</div>
                    </div>
                    
                    <div class="product-remove">
                       <div class="xmark" onclick="removeProduct('<%= cart._id %>')"></div>
                    </div>
                </div>
    
                <% subtotal += finalPrice * cart.quantity; %>
                <% totalDiscount += discountAmount * cart.quantity; %>
            <% }) %>    
        </div>
    
        <% } else { %>
            <p class="text-center">There are no items in your cart. <a href="/shop">Shop</a> now</p>
        <% } %>
    
        <% if (cart.products.length > 0) { %>
        <div class="col-md-4">
            <h4>Order Summary</h4>
            <ul class="list-group">
                <li class="list-group-item d-flex justify-content-between">
                    <span>Subtotal:</span>
                    <span id="subtotal">₹ <%= (subtotal+totalDiscount).toFixed(2) %></span>
                </li>
                <li class="list-group-item d-flex justify-content-between">
                    <span>You Saved:</span>
                    <span id="discount">₹ <%= totalDiscount.toFixed(2) %></span>
                </li>
                <li class="list-group-item d-flex justify-content-between">
                    <span>Delivery Fee:</span>
                    <span>₹ 0</span>
                </li>
                <li class="list-group-item d-flex justify-content-between">
                    <strong>Total:</strong>
                    <strong id="total">₹ <%= (subtotal).toFixed(2) %></strong>
                </li>
            </ul>
    
            <div class="text-center mt-4">
                <a onclick="goToCheckout()" class="btn btn-success">Go to Checkout <i class="fas fa-arrow-right"></i></a>
            </div>
        </div>
        <% } %>
    </div>
    
</main>
<%- include('partials/footer') %>

<script>
    function removeProduct(productId) {
    Swal.fire({
        title: 'Are you sure?',
        text: "This product will be removed from your cart.",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#000',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, remove it!',
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/cart/remove/${productId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
                .then((response) => response.json())
                .then((data) => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Removed!',
                            text: data.message,
                            icon: 'success',
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'OK',
                        }).then(() => {
                            location.reload(); 
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Error removing from cart: ' + data.message,
                            icon: 'error',
                            confirmButtonColor: '#d33',
                            confirmButtonText: 'Try Again',
                        });
                    }
                })
                .catch((error) => {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'Could not remove the product. Please try again.',
                        icon: 'error',
                        confirmButtonColor: '#d33',
                        confirmButtonText: 'OK',
                    });
                });
        }
    });
}

function increaseQuantity(element , cartId){
    const productCard = element.closest('.product-card')
    const quantityCard = productCard.querySelector('.product-quantity')
    const currentQuantityElement = quantityCard.querySelector('.current-quantity')
    const newQuantity = parseFloat(currentQuantityElement.innerText) + 1
    updateQuantity(cartId,newQuantity,currentQuantityElement)
}

function decreaseQuantity(element , cartId){
    const productCard = element.closest('.product-card')
    const quantityCard = productCard.querySelector('.product-quantity')
    const currentQuantityElement = quantityCard.querySelector('.current-quantity')
    const newQuantity = parseFloat(  currentQuantityElement.innerText) - 1
    updateQuantity(cartId,newQuantity,currentQuantityElement)
}

function updateQuantity(cartId , newQuantity,currentQuantityElement) {

    if (newQuantity < 1) {
        Toastify({
            text: 'quantity cannot be less than 1',
            duration: 1000,
            close: true,
            gravity: "top",
            position: 'right',
            style:{ background: "linear-gradient(to right, #ff5f5f, #ff1a1a)" }
        }).showToast()
        return;
    }

    const data = { quantity: newQuantity };

    fetch(`/cart/update/${cartId}`, {
        method: 'PUT', 
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data), 
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            updateOrderSummary(newQuantity,currentQuantityElement)
            Toastify({
                text: data.message,
                duration: 1000,
                close: true,
                gravity: "top",
                position: 'right',
                style: { background: "linear-gradient(to right, #4caf50, #2e7d32)" }
            }).showToast();
        }else{
            Toastify({
            text:  data.message,
            duration: 1000,
            close: true,
            gravity: "top",
            position: 'right',
            style:{ background: "linear-gradient(to right, #ff5f5f, #ff1a1a)" }
        }).showToast()
        }
        
    })
    .catch(error => {
    Toastify({
            text: 'Error update quantity:'+ error.message,
            duration: 1000,
            close: true,
            gravity: "bottom",
            position: 'center',
            style:{ background: "linear-gradient(to right, #ff5f5f, #ff1a1a)" }
        }).showToast(),
    console.error("Error:", error)
})

}

function updateOrderSummary(newQuantity,currentQuantityElement) {
    currentQuantityElement . innerText = newQuantity
        let subtotal = 0;
        let totalDiscount = 0;
        
        document.querySelectorAll('.product-card').forEach(productCard => {
            const discountPriceElement = productCard.querySelector('.discounted-price');
            const quantityElement = productCard.querySelector('.current-quantity');
            const originalPriceElement = productCard.querySelector('.original-price')
console.log(discountPriceElement);

            const originalPrice = parseFloat(originalPriceElement.innerText.replace('₹' ,'').trim())
            const discountPrice = discountPriceElement ? parseFloat(discountPriceElement.innerText.replace('₹', '').trim()) : 0
            const quantity = parseInt(quantityElement.innerText);
            subtotal += originalPrice * quantity;
            discountPriceElement ? totalDiscount += (originalPrice * quantity) - (discountPrice * quantity) : totalDiscount+=0
            
        });

        document.getElementById('subtotal').innerText = '₹ ' + subtotal.toFixed(2);
        document.getElementById('discount').innerText = '₹ ' + totalDiscount.toFixed(2)
        document.getElementById('total').innerText = '₹ ' + (subtotal-totalDiscount).toFixed(2);
    }

    function goToCheckout(){
      const outOfStock = document.querySelectorAll('.out-of-stock')

      if(outOfStock.length > 0){
        Toastify({
            text: 'please remove out of stock products',
            duration: 1000,
            close: true,
            gravity: "top",
            position: 'right',
            style: {background: "linear-gradient(to right, #ff5f5f, #ff1a1a)"}
        }).showToast()
        return 
      }
      window.location.href = '/cart/checkout'
    }

</script>
</body>
</html>
